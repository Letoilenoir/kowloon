import mongoose from "mongoose";
import Settings from "./Settings.js";
const Schema = mongoose.Schema;

const ActivitySchema = new Schema(
  {
    id: { type: String, key: true }, // This is different from the _id, this is the global UUID of the activity.
    actor: { type: Object, default: undefined },
    actorId: { type: String, required: true }, // The actor ID of the activity's author. Required.
    server: { type: String, default: undefined }, // The server of the activity's author. This is used to determine the server of the activity.
    type: { type: String, default: "Create" },
    object: { type: Object, default: undefined }, // The object of the Activity.
    objectType: { type: String, default: undefined }, // This should be the same as the collection name, i.e. Post, React, Circle, etc.
    objectId: { type: String, default: undefined }, // The ID of the activity's object (if it's a Post, React, Circle or other created or modified thing)
    target: { type: String, default: undefined }, // If this activity targets another object, this is the ID of that object (if it's a like or a reply, for example)
    to: { type: String, default: "" },
    replyTo: { type: String, default: "" },
    reactTo: { type: String, default: "" },
    summary: { type: String, default: undefined }, // A summary of the activity generated by the user/app or by the system if none is provided
    // replyCount: { type: Number, default: 0 }, // The number of replies to this post
    // reactCount: { type: Number, default: 0 }, // The number of likes to this post
    // shareCount: { type: Number, default: 0 }, // The number of shares of this post
    flaggedAt: { type: Date, default: null },
    flaggedBy: { type: String, default: null },
    flaggedReason: { type: String, default: null },
    deletedAt: { type: Date, default: null }, // If the activity is deleted, when it was deleted
    deletedBy: { type: String, default: null }, // I`f the activity is deleted, who deleted it (usually the user unless an admin does it)
    url: { type: String, default: undefined },
  },
  {
    strict: false,
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

// ActivitySchema.virtual("actor", {
//   ref: "User",
//   localField: "actorId",
//   foreignField: "id",
//   justOne: true,
// });

ActivitySchema.virtual("reacts", {
  ref: "React",
  localField: "id",
  foreignField: "target",
});

ActivitySchema.pre("save", async function (next) {
  // Create the activity id and url
  const domain = (await Settings.findOne({ name: "domain" })).value;
  this.id = this.id || `activity:${this._id}@${domain}`;
  this.url = this.url || `https://${domain}/activities/${this.id}`;
  this.server =
    this.server || (await Settings.findOne({ name: "actorId" })).value;
  next();
});

export default mongoose.model("Activity", ActivitySchema);
